// Generated by gencpp from file wam_common/RTCartVel.msg
// DO NOT EDIT!


#ifndef WAM_COMMON_MESSAGE_RTCARTVEL_H
#define WAM_COMMON_MESSAGE_RTCARTVEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wam_common
{
template <class ContainerAllocator>
struct RTCartVel_
{
  typedef RTCartVel_<ContainerAllocator> Type;

  RTCartVel_()
    : direction()
    , magnitude(0.0)  {
      direction.assign(0.0);
  }
  RTCartVel_(const ContainerAllocator& _alloc)
    : direction()
    , magnitude(0.0)  {
  (void)_alloc;
      direction.assign(0.0);
  }



   typedef boost::array<float, 3>  _direction_type;
  _direction_type direction;

   typedef float _magnitude_type;
  _magnitude_type magnitude;





  typedef boost::shared_ptr< ::wam_common::RTCartVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_common::RTCartVel_<ContainerAllocator> const> ConstPtr;

}; // struct RTCartVel_

typedef ::wam_common::RTCartVel_<std::allocator<void> > RTCartVel;

typedef boost::shared_ptr< ::wam_common::RTCartVel > RTCartVelPtr;
typedef boost::shared_ptr< ::wam_common::RTCartVel const> RTCartVelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_common::RTCartVel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_common::RTCartVel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wam_common::RTCartVel_<ContainerAllocator1> & lhs, const ::wam_common::RTCartVel_<ContainerAllocator2> & rhs)
{
  return lhs.direction == rhs.direction &&
    lhs.magnitude == rhs.magnitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wam_common::RTCartVel_<ContainerAllocator1> & lhs, const ::wam_common::RTCartVel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wam_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wam_common::RTCartVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_common::RTCartVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_common::RTCartVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_common::RTCartVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_common::RTCartVel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_common::RTCartVel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_common::RTCartVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bde6e49ce1902bc915138d25af0e9ef1";
  }

  static const char* value(const ::wam_common::RTCartVel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbde6e49ce1902bc9ULL;
  static const uint64_t static_value2 = 0x15138d25af0e9ef1ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_common::RTCartVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_common/RTCartVel";
  }

  static const char* value(const ::wam_common::RTCartVel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_common::RTCartVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] direction\n"
"float32    magnitude\n"
;
  }

  static const char* value(const ::wam_common::RTCartVel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_common::RTCartVel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction);
      stream.next(m.magnitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RTCartVel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_common::RTCartVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_common::RTCartVel_<ContainerAllocator>& v)
  {
    s << indent << "direction[]" << std::endl;
    for (size_t i = 0; i < v.direction.size(); ++i)
    {
      s << indent << "  direction[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.direction[i]);
    }
    s << indent << "magnitude: ";
    Printer<float>::stream(s, indent + "  ", v.magnitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_COMMON_MESSAGE_RTCARTVEL_H
