
classdef RTPose < ros.Message
    %RTPose MATLAB implementation of wam_common/RTPose
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'wam_common/RTPose' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '34cb882fafa374fde18bf3b5e23cd4cd' % The MD5 Checksum of the message definition
        PropertyList = { 'Position' 'Orientation' 'PosRateLimits' 'OrtnRateLimits' } % List of non-constant message properties
        ROSPropertyList = { 'position' 'orientation' 'pos_rate_limits' 'ortn_rate_limits' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Position
        Orientation
        PosRateLimits
        OrtnRateLimits
    end
    methods
        function set.Position(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'RTPose', 'Position');
            obj.Position = single(val);
        end
        function set.Orientation(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'RTPose', 'Orientation');
            obj.Orientation = single(val);
        end
        function set.PosRateLimits(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'RTPose', 'PosRateLimits');
            obj.PosRateLimits = single(val);
        end
        function set.OrtnRateLimits(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'RTPose', 'OrtnRateLimits');
            obj.OrtnRateLimits = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.wam_common.RTPose.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.wam_common.RTPose(strObj);
        end
    end
end
