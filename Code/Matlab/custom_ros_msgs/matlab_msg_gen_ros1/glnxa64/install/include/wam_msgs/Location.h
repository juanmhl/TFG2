// Generated by gencpp from file wam_msgs/Location.msg
// DO NOT EDIT!


#ifndef WAM_MSGS_MESSAGE_LOCATION_H
#define WAM_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace wam_msgs
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : header()
    , columna1_orientation()
    , columna2_orientation()
    , columna3_orientation()
    , columna4_position()  {
    }
  Location_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , columna1_orientation(_alloc)
    , columna2_orientation(_alloc)
    , columna3_orientation(_alloc)
    , columna4_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _columna1_orientation_type;
  _columna1_orientation_type columna1_orientation;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _columna2_orientation_type;
  _columna2_orientation_type columna2_orientation;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _columna3_orientation_type;
  _columna3_orientation_type columna3_orientation;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _columna4_position_type;
  _columna4_position_type columna4_position;





  typedef boost::shared_ptr< ::wam_msgs::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::wam_msgs::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::wam_msgs::Location > LocationPtr;
typedef boost::shared_ptr< ::wam_msgs::Location const> LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_msgs::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_msgs::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wam_msgs::Location_<ContainerAllocator1> & lhs, const ::wam_msgs::Location_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.columna1_orientation == rhs.columna1_orientation &&
    lhs.columna2_orientation == rhs.columna2_orientation &&
    lhs.columna3_orientation == rhs.columna3_orientation &&
    lhs.columna4_position == rhs.columna4_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wam_msgs::Location_<ContainerAllocator1> & lhs, const ::wam_msgs::Location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b442292d4660bd1e8b790fcc52b116b";
  }

  static const char* value(const ::wam_msgs::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b442292d4660bd1ULL;
  static const uint64_t static_value2 = 0xe8b790fcc52b116bULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_msgs/Location";
  }

  static const char* value(const ::wam_msgs::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"geometry_msgs/Point columna1_orientation\n"
"geometry_msgs/Point columna2_orientation\n"
"geometry_msgs/Point columna3_orientation\n"
"geometry_msgs/Point columna4_position\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::wam_msgs::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_msgs::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.columna1_orientation);
      stream.next(m.columna2_orientation);
      stream.next(m.columna3_orientation);
      stream.next(m.columna4_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_msgs::Location_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "columna1_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.columna1_orientation);
    s << indent << "columna2_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.columna2_orientation);
    s << indent << "columna3_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.columna3_orientation);
    s << indent << "columna4_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.columna4_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_LOCATION_H
