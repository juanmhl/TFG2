// Generated by gencpp from file wam_common/RTCartPos.msg
// DO NOT EDIT!


#ifndef WAM_COMMON_MESSAGE_RTCARTPOS_H
#define WAM_COMMON_MESSAGE_RTCARTPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wam_common
{
template <class ContainerAllocator>
struct RTCartPos_
{
  typedef RTCartPos_<ContainerAllocator> Type;

  RTCartPos_()
    : position()
    , rate_limits()  {
      position.assign(0.0);

      rate_limits.assign(0.0);
  }
  RTCartPos_(const ContainerAllocator& _alloc)
    : position()
    , rate_limits()  {
  (void)_alloc;
      position.assign(0.0);

      rate_limits.assign(0.0);
  }



   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 3>  _rate_limits_type;
  _rate_limits_type rate_limits;





  typedef boost::shared_ptr< ::wam_common::RTCartPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_common::RTCartPos_<ContainerAllocator> const> ConstPtr;

}; // struct RTCartPos_

typedef ::wam_common::RTCartPos_<std::allocator<void> > RTCartPos;

typedef boost::shared_ptr< ::wam_common::RTCartPos > RTCartPosPtr;
typedef boost::shared_ptr< ::wam_common::RTCartPos const> RTCartPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_common::RTCartPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_common::RTCartPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wam_common::RTCartPos_<ContainerAllocator1> & lhs, const ::wam_common::RTCartPos_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.rate_limits == rhs.rate_limits;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wam_common::RTCartPos_<ContainerAllocator1> & lhs, const ::wam_common::RTCartPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wam_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wam_common::RTCartPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_common::RTCartPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_common::RTCartPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_common::RTCartPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_common::RTCartPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_common::RTCartPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_common::RTCartPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f40423d4ca09896785d982c621cba554";
  }

  static const char* value(const ::wam_common::RTCartPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf40423d4ca098967ULL;
  static const uint64_t static_value2 = 0x85d982c621cba554ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_common::RTCartPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_common/RTCartPos";
  }

  static const char* value(const ::wam_common::RTCartPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_common::RTCartPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] position\n"
"float32[3] rate_limits\n"
;
  }

  static const char* value(const ::wam_common::RTCartPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_common::RTCartPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.rate_limits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RTCartPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_common::RTCartPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_common::RTCartPos_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "rate_limits[]" << std::endl;
    for (size_t i = 0; i < v.rate_limits.size(); ++i)
    {
      s << indent << "  rate_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rate_limits[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_COMMON_MESSAGE_RTCARTPOS_H
